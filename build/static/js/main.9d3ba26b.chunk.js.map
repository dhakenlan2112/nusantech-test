{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["darkTheme","createMuiTheme","palette","type","initialValues","fieldId","label","value","checked","initialResult","App","React","useState","fields","setField","operator","setOp","finalResult","setFinalResult","handleInputChanges","e","prevState","index","findIndex","el","target","attributes","id","tmp","handleCheckboxChanges","getValues","valuesNotEmpty","filter","field","toCount","operationAllowed","length","useEffect","console","log","ThemeProvider","theme","className","style","marginBottom","map","Input","onChange","placeholder","Checkbox","inputProps","ToggleButtonGroup","size","exclusive","event","newOp","ToggleButton","width","margin","Button","variant","color","onClick","marginRight","marginLeft","values","val","join","reduce","a","b","Number","alert","Card","CardContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d3ba26b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Input from \"@material-ui/core/Input\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst initialValues = [\n  {\n    fieldId: \"field1\",\n    label: \"Field 1\",\n    value: \"\",\n    checked: false,\n  },\n  {\n    fieldId: \"field2\",\n    label: \"Field 2\",\n    value: \"\",\n    checked: false,\n  },\n  {\n    fieldId: \"field3\",\n    label: \"Field 3\",\n    value: \"\",\n    checked: false,\n  },\n];\n\nconst initialResult = \"Hasil akan muncul disini\";\n\nfunction App() {\n  const [fields, setField] = React.useState(initialValues);\n\n  const [operator, setOp] = React.useState(null);\n\n  const [finalResult, setFinalResult] = React.useState(initialResult);\n\n  const handleInputChanges = (e) => {\n    setField((prevState) => {\n      let index = prevState.findIndex(\n        (el) => el.fieldId === e.target.attributes.id.value\n      );\n      let tmp = [...prevState];\n      tmp[index] = {\n        ...tmp[index],\n        value: e.target.value,\n      };\n      return tmp;\n    });\n  };\n\n  const handleCheckboxChanges = (e) => {\n    setField((prevState) => {\n      let index = prevState.findIndex(\n        (el) => el.fieldId === e.target.attributes.id.value\n      );\n      let tmp = [...prevState];\n      tmp[index] = {\n        ...tmp[index],\n        checked: !tmp[index].checked,\n      };\n      return tmp;\n    });\n  };\n\n  const handleChangeOp = (event, newOp) => {\n    setOp(newOp);\n  };\n\n  const handleReset = () => {\n    setField(initialValues);\n    setFinalResult(initialResult);\n    setOp(null);\n  };\n\n  const handleSubmit = () => {\n    let values = getValues();\n    if (values.operationAllowed && operator) {\n      const toCount = values.toCount.map((val) => val.value);\n      switch (operator) {\n        case \"plus\":\n          setFinalResult(\n            `${toCount.join(\"+\")} = ${toCount.reduce(\n              (a, b) => Number(a) + Number(b),\n              0\n            )}`\n          );\n          break;\n        case \"min\":\n          setFinalResult(\n            `${toCount.join(\"-\")} = ${toCount.reduce(\n              (a, b) => Number(a) - Number(b)\n            )}`\n          );\n          break;\n        case \"divide\":\n          setFinalResult(\n            `${toCount.join(\"/\")} = ${toCount.reduce(\n              (a, b) => Number(a) / Number(b)\n            )}`\n          );\n          break;\n        case \"times\":\n          setFinalResult(\n            `${toCount.join(\"x\")} = ${toCount.reduce(\n              (a, b) => Number(a) * Number(b)\n            )}`\n          );\n          break;\n        default:\n          console.log(\"default operation\");\n      }\n    } else {\n      alert(\n        \"Silahkan centang minimal 2, isi semua field, dan pilih salah satu operator\"\n      );\n    }\n  };\n\n  const getValues = () => {\n    const fieldCandidate = fields.filter((field) => field.checked);\n    const valuesNotEmpty = fieldCandidate.filter((field) => field.value);\n    const operationAllowed = valuesNotEmpty.length > 1;\n    return {\n      toCount: valuesNotEmpty,\n      operationAllowed: operationAllowed,\n    };\n  };\n\n  React.useEffect(() => {\n    console.log(\"fields\", fields);\n  }, [fields]);\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Nusantech Test</h1>\n          <div style={{ marginBottom: \"16px\" }}>\n            {fields.map((field) => (\n              <div>\n                <Input\n                  id={field.fieldId}\n                  label={field.label}\n                  value={field.value}\n                  onChange={handleInputChanges}\n                  type=\"number\"\n                  placeholder={field.label}\n                />\n                <Checkbox\n                  id={field.fieldId}\n                  checked={field.checked}\n                  onChange={handleCheckboxChanges}\n                  inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                />\n              </div>\n            ))}\n          </div>\n          <div style={{ marginBottom: \"16px\" }}>\n            <ToggleButtonGroup\n              size=\"medium\"\n              value={operator}\n              exclusive\n              onChange={handleChangeOp}\n            >\n              <ToggleButton value=\"plus\">+</ToggleButton>\n              <ToggleButton value=\"min\">-</ToggleButton>\n              <ToggleButton value=\"divide\">/</ToggleButton>\n              <ToggleButton value=\"times\">x</ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n          <div style={{ width: 300, margin: \"0 auto\" }}>\n            <div style={{ marginBottom: 16 }}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                size=\"large\"\n                onClick={handleReset}\n                style={{ marginRight: 4, marginLeft: 4 }}\n              >\n                Reset\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                onClick={handleSubmit}\n                style={{ marginRight: 4, marginLeft: 4 }}\n              >\n                Hitung\n              </Button>\n            </div>\n            <Card>\n              <CardContent>\n                <small>Hasil</small>\n                <div>\n                  <strong>{finalResult}</strong>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </header>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}